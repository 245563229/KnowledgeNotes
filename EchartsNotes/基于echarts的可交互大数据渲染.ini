1、基于echarts的可交互大数据渲染
1-2、echarts是2012年百度开发内部的基于JS的可视化工具一个项目
半年后2013年在github上开源V1.0版本，现在是V5.3
1-3、可以跨平台的可视化解决方案，一次代码到处运行，Canvsa和SVG，VML，canvas更适合大数据渲染，能够细化细节。SVG相对占用内存比较小，合适低端手机端，
1-4、最早只能适用10w数据量的可视化，
1-5、目前是在前端做大数据渲染，为什么不在后端呢，
1-5-1、直接在后端生成图片传给前端，（无法交互，）
1-5-2、在后端做预计算，减少传输和渲染的数据量。（视觉效果变差，需要后端有额外的计算资源。
1-5-3、前端做可以在没有网络延迟的基础上看到更多的细节。
1-5-4、前端实现，是浏览器向服务器请求数据，在网页中渲染，话是很简单这么说，但是受到网页浏览器的限制，网络，内存，响应时间等问题。
1-5-5、echarts使用JSON管理图表配置，传入配置项时，会根据是否是第一次配置去决定创建一个新的还是更新模型，
1-5-6、model包含设置，多维数据等，再根据data zooming等组件去计算出渲染数据，根据数据范围，坐标系会创建并且更新，再根据数据进行布局和映射，比如这个数值到数据点的颜色，大小等，在生成绘制图形和修改样式的指令，echarts不会做直接渲染，。是使用ZRender完成底层渲染。
1-5-7.ZRender提供渲染canvas，SVG，VML的一致接口，所以用ZRender就不需要考虑渲染引擎底层不同的实现。
1-5-8，用户与图表进行交互或者发起事件指令的时候，数据就更新并且重新渲染。
2-1用户场景相关方法
2-1-1找到特定场景的渲染瓶颈，然后优化
●→m→马→馬→真正的马。
2-1-2、假设50w数据的折线图，绘图区宽度为1000像素，每个像素中包含500个数据，很明显，如果不放大的话人眼识别不出这500个像素点，可以降低采样率。比如500个点渲染成一个点，用户放大区域时采样率就会提高，这样隐藏的数据又会显示出来，这样用户就感觉不到问题，同时一次性渲染的数据量变成了1000。也可以根据平均，最大，最小，甚至是回调函数去设定渲染的值
3-1，代码结构
3-1-1，柱状图，设置样式，绘制矩形。echarts把多个矩形合并成了一个复杂图形，样式只会被设置一次，图形会被绘制多次。
3-1-2.垃圾回收，（垃圾就是只不能再被访问的数据）C语言有底层的内存管理malloc（），free（）等。JS支持有5ms的自动释放内存，正常60fps设备，一帧1000ms/60=16ms，其实是比较麻烦的，所以大屏可视化这种没有时间去做垃圾回收了、这里牵扯到V8引擎，不多讲了。所以这里就要尽量及时释放内存比如闭包，函数等。或者重用数据。他这里使用了typed array定型数组，可以让js代码能够快速简单的操作原始二进制数据。
4-1，基于感官，让用户相信渲染很快，
4-1-2，有多少渲染多少，并且在渲染过程中不阻塞交互，渐进式渲染。过三秒啪的就好了，现在是一点一点加载出来，每一帧1000数据，10w数据要100帧完成，但是用户不会感觉加载时间常，因为数据一直在更新，
5-1，数据加载，同时，数据分割要保证随机性，防止像是卡在那里，。
5-1-1，原始数据1000m，JSON存储变成100m，gzip后40m，二进制20m，但是分成32个文件，每个文件只有<1m，
2、假设按1000w数据量渲染，1920*1080含有207w像素点
每个像素点上有5个数据点。